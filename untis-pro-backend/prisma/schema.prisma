// Prisma schema for Untis Pro backend
// Auto-migrated to keep DB in sync

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    username String
    // hashed or encrypted password at rest; for demo we store as text. Replace with vault/KMS in prod.
    password String

    displayName String?

    // Sharing preferences
    sharingEnabled Boolean @default(true) // By default, new accounts enable sharing
    
    // Relationships
    timetables   Timetable[]
    sessions     SessionToken[]
    lessonColors LessonColorSetting[]
    homework     Homework[]
    exams        Exam[]
    
    // Sharing relationships
    sharingWith     TimetableShare[] @relation("UserSharingWith")
    sharedWithBy    TimetableShare[] @relation("UserSharedWithBy")

    @@unique([username])
}

model Timetable {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    ownerId   String
    owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

    // Cached JSON from WebUntis; keep flexible
    rangeStart DateTime?
    rangeEnd   DateTime?
    payload    Json
}

model SessionToken {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    token     String   @unique
    expiresAt DateTime
}

model LessonColorSetting {
    id         String   @id @default(uuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    userId     String
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    lessonName String // Subject name like "Math", "English", etc.
    color      String // Hex color code like "#3b82f6"
    offset     Float    @default(0.5) // Gradient offset 0..1

    @@unique([userId, lessonName])
}

model DefaultLessonColor {
    id         String   @id @default(uuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    lessonName String   @unique // Subject name
    color      String // Default hex color code
    offset     Float    @default(0.5) // Gradient offset 0..1
}

model TimetableShare {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    
    // User who is sharing their timetable
    ownerId   String
    owner     User     @relation("UserSharingWith", fields: [ownerId], references: [id], onDelete: Cascade)
    
    // User who can view the timetable
    sharedWithId String
    sharedWith   User     @relation("UserSharedWithBy", fields: [sharedWithId], references: [id], onDelete: Cascade)
    
    @@unique([ownerId, sharedWithId])
}

model AppSettings {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    // Global setting for admins to disable all sharing
    globalSharingEnabled Boolean @default(true)
}

model Homework {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    // WebUntis homework ID
    untisId   Int      @unique
    
    // User who owns this homework
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    // Homework details from WebUntis
    lessonId  Int?     // Associated lesson ID from WebUntis
    date      Int      // Due date in yyyymmdd format
    subjectId Int
    subject   String   // Subject name
    text      String   // Homework description
    remark    String?  // Additional remarks
    completed Boolean  @default(false)
    
    // Metadata
    fetchedAt DateTime @default(now())
}

model Exam {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    // WebUntis exam ID
    untisId   Int      @unique
    
    // User who owns this exam
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    // Exam details from WebUntis
    date      Int      // Exam date in yyyymmdd format
    startTime Int      // Start time in HHmm format
    endTime   Int      // End time in HHmm format
    subjectId Int
    subject   String   // Subject name
    name      String   // Exam name
    text      String?  // Additional exam information
    
    // Related entities (stored as JSON for flexibility)
    teachers  Json?    // Array of teacher objects
    rooms     Json?    // Array of room objects
    
    // Metadata
    fetchedAt DateTime @default(now())
}
