// Prisma schema for Untis Pro backend
// Auto-migrated to keep DB in sync

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    username              String
    // Secure credential fields (legacy plaintext password removed)
    hashedPassword        String? // Argon2id hash for local app authentication
    untisSecretCiphertext Bytes? // AES-GCM ciphertext of Untis password (for background refresh)
    untisSecretNonce      Bytes? // AES-GCM nonce
    untisSecretKeyVersion Int?    @default(1) // Version of master key used

    displayName String?
    isUserManager Boolean @default(false) // Can manage users but is not full admin

    // Sharing preferences
    sharingEnabled Boolean @default(true) // By default, new accounts enable sharing

    // Color preferences
    ignoreAdminColors Boolean @default(true) // Ignore admin-set colors and use default colors

    // Relationships
    timetables   Timetable[]
    sessions     SessionToken[]
    lessonColors LessonColorSetting[]
    homework     Homework[]
    exams        Exam[]

    // Sharing relationships
    sharingWith  TimetableShare[] @relation("UserSharingWith")
    sharedWithBy TimetableShare[] @relation("UserSharedWithBy")

    // Notification relationships
    notifications             Notification[]
    notificationSettings      NotificationSettings?
    notificationSubscriptions NotificationSubscription[]

    @@unique([username])
}

model Timetable {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    ownerId   String
    owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

    // Cached JSON from WebUntis; keep flexible
    rangeStart DateTime?
    rangeEnd   DateTime?
    payload    Json
}

model SessionToken {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    token     String   @unique
    expiresAt DateTime
}

model LessonColorSetting {
    id         String   @id @default(uuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    userId     String
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    lessonName String // Subject name like "Math", "English", etc.
    color      String // Hex color code like "#3b82f6"
    offset     Float    @default(0.5) // Gradient offset 0..1

    @@unique([userId, lessonName])
}

model DefaultLessonColor {
    id         String   @id @default(uuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    lessonName String   @unique // Subject name
    color      String // Default hex color code
    offset     Float    @default(0.5) // Gradient offset 0..1
}

model TimetableShare {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    // User who is sharing their timetable
    ownerId String
    owner   User   @relation("UserSharingWith", fields: [ownerId], references: [id], onDelete: Cascade)

    // User who can view the timetable
    sharedWithId String
    sharedWith   User   @relation("UserSharedWithBy", fields: [sharedWithId], references: [id], onDelete: Cascade)

    @@unique([ownerId, sharedWithId])
}

model AppSettings {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Global setting for admins to disable all sharing
    globalSharingEnabled Boolean @default(true)
}

model Homework {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    // WebUntis homework ID
    untisId   Int
    
    // User who owns this homework
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    // Homework details from WebUntis
    lessonId  Int?     // Associated lesson ID from WebUntis
    date      Int      // Due date in yyyymmdd format
    subjectId Int
    subject   String   // Subject name
    text      String   // Homework description
    remark    String?  // Additional remarks
    completed Boolean  @default(false)
    
    // Metadata
    fetchedAt DateTime @default(now())
    
    // Composite unique constraint: homework should be unique per user
    @@unique([userId, untisId])
}

model Exam {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    // WebUntis exam ID
    untisId   Int
    
    // User who owns this exam
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    // Exam details from WebUntis
    date      Int      // Exam date in yyyymmdd format
    startTime Int      // Start time in HHmm format
    endTime   Int      // End time in HHmm format
    subjectId Int
    subject   String   // Subject name
    name      String   // Exam name
    text      String?  // Additional exam information
    
    // Related entities (stored as JSON for flexibility)
    teachers  Json?    // Array of teacher objects
    rooms     Json?    // Array of room objects
    
    // Metadata
    fetchedAt DateTime @default(now())
    
    // Composite unique constraint: exam should be unique per user
    @@unique([userId, untisId])
}

// DB-backed whitelist rules â€” username only
model WhitelistRule {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    value     String   @unique
}

// Access requests for whitelist mode
model AccessRequest {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    username  String   @unique
    message   String?  // Optional message from user explaining why they need access
}

// Notification system models
model Notification {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Target user
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Notification details
    type      String  // 'timetable_change', 'access_request', etc.
    title     String
    message   String
    data      Json?   // Additional structured data

    // Status
    read      Boolean @default(false)
    sent      Boolean @default(false) // For push notifications
    expiresAt DateTime?

    @@index([userId, createdAt])
    @@index([type, createdAt])
}

model NotificationSettings {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // User settings
    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    // General notification preferences
    browserNotificationsEnabled Boolean @default(true)
    pushNotificationsEnabled     Boolean @default(false)

    // Notification type preferences
    timetableChangesEnabled   Boolean @default(true)
    accessRequestsEnabled     Boolean @default(true) // Only relevant for user managers
    irregularLessonsEnabled   Boolean @default(true)
    cancelledLessonsEnabled   Boolean @default(true)

    // Time scope preferences for notifications
    cancelledLessonsTimeScope String @default("day") // "day" | "week"
    irregularLessonsTimeScope String @default("day") // "day" | "week"

    // Device-specific settings (JSON for flexibility)
    devicePreferences Json? // { "mobile": {...}, "desktop": {...} }
}

model NotificationSubscription {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // User and device info
    userId   String
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    endpoint String @unique // Push subscription endpoint
    
    // Push subscription details
    p256dh String // Public key
    auth   String // Auth secret
    
    // Device metadata
    userAgent String?
    deviceType String? // 'mobile', 'desktop', 'tablet'
    
    // Status
    active Boolean @default(true)

    @@index([userId, active])
}

model AdminNotificationSettings {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Fetch timing settings (in minutes)
    timetableFetchInterval Int @default(30) // How often to check for timetable changes
    
    // Notification settings
    enableTimetableNotifications Boolean @default(true)
    enableAccessRequestNotifications Boolean @default(true)
    
    // Single row constraint
    @@unique([id])
}
