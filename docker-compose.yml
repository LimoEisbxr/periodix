services:
    db:
        image: postgres:16-alpine
        restart: unless-stopped
        environment:
            # Pulled from .env (POSTGRES_USER / POSTGRES_PASSWORD); defaults keep dev simple
            POSTGRES_USER: ${POSTGRES_USER:-postgres}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
            POSTGRES_DB: untis_pro
        ports:
            - '6666:5432'
        volumes:
            - pgdata:/var/lib/postgresql/data
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U postgres']
            interval: 5s
            timeout: 5s
            retries: 10

    backend:
        build:
            context: ./untis-pro-backend
            dockerfile: Dockerfile
        depends_on:
            db:
                condition: service_healthy
        env_file:
            - .env
        environment:
            # Use dynamic credentials so changing them in .env propagates
            DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/untis_pro?schema=public
            JWT_SECRET: ${JWT_SECRET}
            PORT: ${PORT}
            UNTIS_MASTER_KEY: ${UNTIS_MASTER_KEY}
            # Do not override CORS_ORIGIN so env file or runtime env controls it; if unset, backend reflects Origin
            CORS_ORIGIN: ${CORS_ORIGIN}
        ports:
            - '3001:3001'
        healthcheck:
            test: ['CMD', 'curl', '-fsS', 'http://localhost:3001/health']
            interval: 10s
            timeout: 5s
            retries: 12
            start_period: 40s
        restart: unless-stopped

    frontend:
        build:
            context: ./untis-pro-frontend
            dockerfile: Dockerfile
        depends_on:
            backend:
                condition: service_healthy
        ports:
            - '${WEB_PORT:-8080}:80'
        env_file:
            - .env
        restart: unless-stopped

volumes:
    pgdata:
